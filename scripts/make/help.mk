NAME = Matthew Weingarten
EMAIL = mew2260@columbia.edu
LAB_NAME = ICE Lab
PROJECT_TITLE = RISCV performance characterization

SEPARATOR =       =================================================================
SMALL_SEPARATOR = -------------------------------------------------------------

help:
	@echo ""
	@echo "  ____   _____  ____  ______ "
	@echo " |  _ \ | ____||  _ \|  ____|"
	@echo " | |_) ||  _|  | |_) | |__   "
	@echo " |  __/ | |___ |  _ <|  __|  "
	@echo " |_|    |_____||_| \_\_|     "
	@echo "${SEPARATOR}"
	@echo "  ${LAB_NAME} - ${PROJECT_TITLE}"
	@echo "${SEPARATOR}"
	@echo "Usage: make <target>"
	@echo ""
	@echo "Available targets:"
	@echo ""
	@echo "    V=1                                   Show commands (quiet echo)"
	@echo "    V=2                                   Very verbose (full command output)"
	@echo ""
	@echo "${SMALL_SEPARATOR}"
	@echo "  üìñ Help"
	@echo "${SMALL_SEPARATOR}"
	@echo "    help                                  Display this help message"
	@echo ""
	@echo "${SMALL_SEPARATOR}"

	@echo "  üìà Benchmarks"
	@echo "${SMALL_SEPARATOR}"
	@echo "    microbenchmarks PMU=<0|1> CORE=<Rocket|Boom|..> COREWIDTH=<corewidth>"
	@echo "                                          Builds microbenchmarks with optional baremetal PMU harness"
	@echo "    riscv-tests     PMU=<0|1> CORE=<Rocket|Boom|..> COREWIDTH=<corewidth>"
	@echo "                                          Builds riscv-tests microbenchmarks with optional baremetal PMU harness"
	@echo ""
	@echo "${SMALL_SEPARATOR}"

	@echo "  üß™ Verilator"
	@echo "${SMALL_SEPARATOR}"
	@echo "    verilator-build-<config>"
	@echo "                                          Build the verilator simulation for the specified <config> (e.g., RocketConfig) in the verilator directory."
	@echo ""
	@echo "    verilator-run-<config>-micro-<benchmark>"
	@echo "                                          Run the verilator simulation for the given built simulation config target and microbenchmark."
	@echo "                                          Output is saved in the benchmarks output directory with a timestamp."
	@echo ""
	@echo "${SMALL_SEPARATOR}"

	@echo "  üë®‚Äçüöí FireMarshal Workloads"
	@echo "${SMALL_SEPARATOR}"
	@echo "    <workload>-workload CORE=<Rocket|Boom|..> COREWIDTH=<corewidth>"
	@echo "                                          Build and install a custom workload."
	@echo "                                          Use JSON parameter if .json file does not match workload folder name:"
	@echo "                                            If JSON is unset, defaults to <workload>.json"
	@echo "                                            Otherwise uses JSON file at $(JSON).json"
	@echo "                                          Sets PMU harness build by default (see pmu build rules)."
	@echo "                                          This copies built PMU tools for the specific core into the FireMarshal file overlay."
	@echo ""
	@echo "    <workload>-raw-workload              Same as <workload>-workload, but without PMU dependencies."
	@echo ""
	@echo "    spec-workload                        Build and install a SPEC workload."
	@echo "                                          Requires JSON variable to be set to one of:"
	@echo "                                            spec17-intrate-seq"
	@echo "                                            spec17-intrate-test-500"
	@echo "                                            spec17-intrate-test-seq"
	@echo "                                            spec17-intrate-test"
	@echo "                                            spec17-intrate"
	@echo "                                            spec17-intspeed-test-600"
	@echo "                                            spec17-intspeed-test"
	@echo "                                            spec17-intspeed"
	@echo "                                          Includes PMU harness build (see pmu build rules)."
	@echo ""
	@echo "    microbench-workload                  Build and install the Microbench workload."
	@echo "                                          Uses fixed config at microbench.json"
	@echo "                                          Includes PMU harness build (see pmu build rules)."
	@echo ""
	@echo "    <workload>-workload-clean            Clean build artifacts for a given workload."
	@echo "    spec-workload-clean                  Clean build artifacts for SPEC workloads."
	@echo "    microbench-workload-clean            Clean build artifacts for microbench workload."
	@echo ""
	@echo "${SMALL_SEPARATOR}"

	@echo "  üî• FireSim"
	@echo "${SMALL_SEPARATOR}"
	@echo "    Basic commands are init, infrasetup and runworkload, run."
	@echo "    run is a shortcut for infrasetup and runworkload."
	@echo "    infrasetup sets up infrastructure to run a FireSim simulation."
	@echo "    init needs to be called once at setup time to copy the template configs."
	@echo "    Special cases like infrasetup-trace and runworkload-trace must appear as pairs."
	@echo ""
	@echo "    FireSim Parameters"
	@echo "      HW=<name>                           Choose hardware configuration to simulate."
	@echo "                                          Refers to a config in config_build_recipes.yaml and the hardware database."
	@echo "      WORKLOAD=<name>                    Software workload to run. Must already be built (see FireMarshal rules)."
	@echo "      META_DEBUG=<0|1>                   Produce debug waveforms for metasimulation."
	@echo "      TRACE_FORMAT=<0|1|2>               Only with run-trace. 0 = human, 1 = binary, 2 = flamegraph."
	@echo "      TRACE_TRIGGER=<0|1|2|3>            Only with run-trace. 0 = none, 1 = cycle count, 2 = PC, 3 = instruction."
	@echo "      TRACE_CUSTOM_WIDTH=<width>         Trace bit width (default is 1)."
	@echo ""
	@echo "    FireSim Config Files"
	@echo "      config_build.yaml                  FireSim build config"
	@echo "      config_runtime.yaml                FireSim runtime config"
	@echo "      meta_config_runtime.yaml           Meta-sim runtime config"
	@echo "      config_hwdb.yaml                   Hardware database"
	@echo "      config_build_recipes.yaml          Build recipes"
	@echo ""
	@echo "    FireSim Make Rules"
	@echo "      init                               Initialize FireSim with templates"
	@echo "      buildbitstream                     Build the FPGA bitstream"
	@echo "      infrasetup (HW=<name>)             Setup FireSim infrastructure"
	@echo "      runworkload (WORKLOAD=<name>)      Run workload in FireSim"
	@echo "      run (HW=<name>, WORKLOAD=<name>)   Run both infrasetup and runworkload"
	@echo ""
	@echo "      infrasetup-trace (HW=<name>)       Setup tracing infrastructure"
	@echo "      runworkload-trace (WORKLOAD=<name>) Run workload with tracing"
	@echo "      run-trace (HW=<name>, WORKLOAD=<name>) Run tracing setup and workload"
	@echo ""
	@echo "      meta-infrasetup (HW=<name>)        Setup infrastructure for MetaSim"
	@echo "      meta-runworkload (WORKLOAD=<name>) Run MetaSim workload"
	@echo "      meta-run (HW=<name>, WORKLOAD=<name>) Run MetaSim infrastructure and workload"
	@echo ""
	@echo "      meta-infrasetup-trace (HW=<name>)        Setup MetaSim tracing infrastructure"
	@echo "      meta-runworkload-trace (WORKLOAD=<name>) Run MetaSim tracing workload"
	@echo "      meta-run-trace (HW=<name>, WORKLOAD=<name>) Run both MetaSim tracing setup and workload"
	@echo ""
	@echo "${SMALL_SEPARATOR}"

	@echo "  üîç PMU Tools & Harness"
	@echo "${SMALL_SEPARATOR}"
	@echo "    pmu_perf CORE=<Rocket|Boom,..> COREWIDTH=<corewidth>"
	@echo "                                          Compile PMU performance tool"
	@echo "    pmu_read_counters CORE=<Rocket|Boom|..> COREWIDTH=<corewidth>"
	@echo "                                          Compile PMU read counters tool"
	@echo "    pmu_setup                            Prepare PMU environment and apply SBI patch."
	@echo "                                          Rebuild OpenSBI if changes are made."
	@echo "    pmu_setup_sbi CORE=<Rocket|Boom|..> COREWIDTH=<corewidth>"
	@echo "                                          Setup SBI symlinks for PMU and core"
	@echo "    pmu_clean                            Remove PMU build output"
	@echo ""
	@echo "${SMALL_SEPARATOR}"

	@echo "  üîå Synthesis and physical design"
	@echo "${SMALL_SEPARATOR}"
	@echo "    -C $(PC_DIR)/vlsi help               Explore the VLSI flow"
	@echo ""
	@echo "${SMALL_SEPARATOR}"

	@echo "Author : ${NAME} <${EMAIL}>"
	@echo ""
	@echo "${SEPARATOR}"
	@echo ""
